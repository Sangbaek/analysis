#!/bin/csh -f

source /site/12gev_phys/production.csh 1.3
source /home/clase1-6/recook/cookEnvironment

set file    = (`ls clas_0*.A*`)
set pass    = $PASS
set nevents = 2000000  # number of events to be processed
set JPUT    = 0        # 1 = put in silo (if conditions) 0 do not put in silo
set MOV     = 1        # = 1 will always copy files to disk. = 0 will only copy if conditions are not met


set RUN  = (`\echo $file  | awk -F_ '{print $2}' | awk -F. '{printf "%d", $1}'`)
set LEV  = (`\echo $file  | awk -F. '{print $2}' | tr '[A]' '[a]' `)
set EXT  = (`\echo $LEV   | awk -Fa '{print $2}'`)

\echo
\echo Data file to be processed: $file
\echo Run number: $RUN - file $LEV
\echo
\echo "Conntent of current directory:"
\ls -alr


# Naming conventions
# ------------------

set CORENAME = $RUN"_"$pass"."$LEV

set COOKED    =    "run_"$CORENAME

set NTUPLE    =    "ntp_"$CORENAME".hbook"
set NTUPLE10  =  "ntp10_"$CORENAME".hbook"

set ROOT      =   "root_"$CORENAME".root"
set ROOT10    = "root10_"$CORENAME".root"

set LOG       =    "log_"$CORENAME".txt"
set HISTO     =    "hst_"$CORENAME".hbook"
set PDU       =    "pdu_"$CORENAME".hbook"

set MU        =    $RUN"."$LEV".mu"

# Pdu
# ---

\echo Running PDU
./pdu $file
\echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ;


# User_ana
# --------

# Appending informations to tcl file
set tclfile = (`ls *.tcl`)
set RUNEXT  = $RUN$EXT
printf "set runfile %d;\n" $RUNEXT >> $tclfile
printf "go %d;\n"  $nevents        >> $tclfile
printf "exit_pend;\n\n"            >> $tclfile

\echo Running user_ana on $file

rm -f InputFile ; ln -s $file InputFile
./user_ana -t ./$tclfile

\echo "Conntent of current after user_ana:"
\ls -alr

\echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ;

# check that the file has been cooked correctly
# first run it once to display result on screen
\echo Veryfing conditions
./verifyConditions
set CONDITIONS = (`./verifyConditions | grep Result | awk '{print $2}'`)


# renaming files to conventions
mv outfile1       $COOKED
if( -f outfile1.A00) then
	mv outfile1.A00 $COOKED.2
endif

mv histfile       $NTUPLE
mv anamonhist     $HISTO
mv logfile        $LOG
mv pdu_$RUN".hbk" $PDU
\echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ;

\echo "Conntent of renaming user_ana and pdu output:"
\ls -alr


\echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ;

# MU output
\echo Running bos2mu
./bos2mu -DC_PLANES=1 -INFOS="e1-6 pass3" -RUN_INDEX=$CLAS_CALDB_RUNINDEX -OUTPUT=$MU $COOKED
\echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ;


# NTUPLE10
\echo running nt10maker, output is $NTUPLE10
./nt10maker -o$NTUPLE10  $COOKED
\echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ;

# ROOT
\echo running h2root
h2root $NTUPLE    $ROOT    > /dev/null
h2root $NTUPLE10  $ROOT10  > /dev/null
\echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ; \echo ;


set CORE_FOUND     = (`ls | grep core | wc  | awk '{print $1}'`)
if($CORE_FOUND == "1") then
	\echo Core found. Arg.
endif


\echo "Conntent of current after bos2mu and nt10maker and h2roo"
\ls -alr


# Jputting if conditions met and no core found
if($JPUT == "1" && $CONDITIONS == "Passed" && $CORE_FOUND == "0") then
	\echo
	\echo Conditions passed. No coredump found. Putting files into silo
	\echo

	/site/bin/jput $COOKED    $SILO_OUT/data/$COOKED

	/site/bin/jput $NTUPLE    $SILO_OUT/ntuple/main/$NTUPLE
	/site/bin/jput $NTUPLE10  $SILO_OUT/ntuple/e/$NTUPLE10

	/site/bin/jput $ROOT      $SILO_OUT/root/main/$ROOT
	/site/bin/jput $ROOT10    $SILO_OUT/root/e/$ROOT10

	/site/bin/jput $LOG       $SILO_OUT/log/$LOG
	/site/bin/jput $HISTO     $SILO_OUT/histos/monitoring/$HISTO
	/site/bin/jput $PDU       $SILO_OUT/histos/pdu/$PDU
endif



# Moving files to disks if MOV = 1 or if verify_conditions returned failed
if($MOV == "1" || $CONDITIONS == "Failed") then
	\echo Copying files in the work disks.

	cp $COOKED    $DATA_OUT/data/
	if( -f $COOKED.2) then
		cp $COOKED.2    $DATA_OUT/data/
	endif

	cp $NTUPLE    $NTUP_OUT/ntuple/main/
 	cp $NTUPLE10  $NTUP_OUT/ntuple/nt10

	cp $ROOT      $ROOT_OUT/root/main/
	cp $ROOT10    $ROOT_OUT/root/nt10

	cp $LOG       $HIST_OUT/log/$LOG
	cp $HISTO     $HIST_OUT/histos/monitoring/$HISTO
	cp $PDU       $HIST_OUT/histos/pdu/$PDU

	cp $MU        $MU_OUT/mu

endif

\echo
\echo Done!
\echo
