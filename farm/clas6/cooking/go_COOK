#!/bin/csh -f

source /site/12gev_phys/production.csh 1.2
source /home/clase1-5/recook/cookEnvironment

set file    = (`ls clas_0*.A*`)
set pass    = $PASS
set nevents = 200000  # number of events to be processed
set JPUT    = 1       # 1 = put in silo (if conditions) 0 do not put in silo
set MOV     = 0       # = 1 will always copy files to disk. = 0 will only copy if conditions are not met


set RUN  = (`echo $file  | awk -F_ '{print $2}' | awk -F. '{printf "%d", $1}'`)
set LEV  = (`echo $file  | awk -F. '{print $2}' | tr '[A]' '[a]' `)
set EXT  = (`echo $LEV   | awk -Fa '{print $2}'`)

echo
echo Data file to be processed: $file
echo Run number: $RUN - file $LEV
echo


# Naming conventions
# ------------------

set CORENAME = $RUN"_"$pass"."$LEV

set COOKED    =    "run_"$CORENAME

set NTUPLE    =    "ntp_"$CORENAME".hbook"
set NTUPLE10  =  "ntp10_"$CORENAME".hbook"

set ROOT      =   "root_"$CORENAME".root"
set ROOT10    = "root10_"$CORENAME".root"

set LOG       =    "log_"$CORENAMEV".txt"
set HISTO     =    "hst_"$CORENAME".hbook"
set PDU       =    "pdu_"$CORENAME".hbook"


# Pdu
# ---

echo Running PDU
./pdu $file


# User_ana
# --------

# Appending informations to tcl file
set tclfile = (`ls *.tcl`)
set RUNEXT  = $RUN$EXT
printf "set runfile %d;\n" $RUNEXT >> $tclfile
printf "go %d;\n"  $nevents        >> $tclfile
printf "exit_pend;\n\n"            >> $tclfile

echo Running user_ana

ln -s $file InputFile
./user_ana -t ./$tclfile


# check that the file has been cooked correctly
# first run it once to display result on screen
./verify_conditions
set CONDITIONS = (`./verify_conditions | grep Result | awk '{print $2}'`)

ls -lrt

# renaming files to conventions
mv output1        $COOKED
mv histfile       $NTUPLE
mv anamonhist     $HISTO
mv logfile        $LOG
mv pdu_$RUN".hbk" $PDU

# NTUPLE
nt10maker -o$NTUPLE10  $COOKED1 > /dev/null

# ROOT
h2root $NTUPLE    $ROOT    > /dev/null
h2root $NTUPLE10  $ROOT10  > /dev/null


set CORE_FOUND     = (`ls | grep core | wc  | awk '{print $1}'`)
if($CORE_FOUND == "1") then
	echo Core found. Arg.
endif


ls -lrt


# Jputting if conditions met and no core found
if($JPUT == "1" && $CONDITIONS == "Passed" && $CORE_FOUND == "0") then
	echo
	echo Conditions passed. No coredump found. Putting files into silo
	echo

	/site/bin/jput $COOKED1   $SILO_OUT/data/$COOKED1

	/site/bin/jput $NTUPLE    $SILO_OUT/ntuple/main/$NTUPLE1
	/site/bin/jput $NTUPLE10  $SILO_OUT/ntuple/e/$NTUPLES1

	/site/bin/jput $ROOT      $SILO_OUT/root/main/$ROOT1
	/site/bin/jput $ROOT10    $SILO_OUT/root/e/$ROOTS1

	/site/bin/jput $LOG       $SILO_OUT/log/$LOG
	/site/bin/jput $HISTO     $SILO_OUT/histos/monitoring/$HISTO
	/site/bin/jput $PDU       $SILO_OUT/histos/pdu/$PDU
endif



# Moving files to disks if MOV = 1 or if verify_conditions returned failed
if($MOV == "1" || $CONDITIONS == "Failed") then
	echo Copying files in the work disks.

	cp $COOKED1   $DATA_OUT/data/

	cp $NTUPLE    $NTUP_OUT/ntuple/main/
	cp $NTUPLE10  $NTUP1_OUT/ntuple/e/

	cp $ROOT      $ROOT_OUT/root/main/
	cp $ROOT10    $ROOT1_OUT/root/e/

	cp $LOG       $HIST_OUT/log/$LOG
	cp $HISTO     $HIST_OUT/histos/monitoring/$HISTO
	cp $PDU       $HIST_OUT/histos/pdu/$PDU

endif

